val list = listOf(
	"Трансформатор Т1",
	"Трансформатор Т2",
	"Трансформатор АТ3",
	"Трансформатор АТ4",
	"Трансформатор Т5",
	"Трансформатор Т6",
	"Генератор ТГ-1",
	"Генератор ТГ-3",
	"Генератор ТГ-4",
	"Генератор ТГ-5",
	"Генератор ТГ-6",
	"Блок 1ГТ",
	"Блок 3ГАТ",
	"Блок 4ГАТ",
	"Блок 5ГТ",
	"Блок 6ГТ",
	"1СШ-220кВ",
	"2СШ-220кВ",
	"ТН 1СШ-220 кВ",
	"ТН 2СШ-220 кВ",
	"1ДЗШ 220 кВ",
	"1УРОВ 220 кВ",
	"2ДЗШ 220 кВ с 2УРОВ 220 кВ",
	"ШСВ-220",
	"ОВ-220 и ОСШ-220 кВ",
	"ВЛ-220 Мирадино (ВЛ-205)",
	"ВЛ-220 Светлогорск (ВЛ-219)",
	"1-й комплекс защит Siemens ВЛ-220 Мирадино (ВЛ-205)",
	"2-й комплекс защит Siemens ВЛ-220 Мирадино (ВЛ-205)",
	"1СШ-110кВ",
	"2СШ-110кВ",
	"ШСВ-110",
	"OB-110кВ и ОСШ-110кВ",
	"ТН 1СШ-110кВ",
	"ТН 2СШ-110кВ",
	"1ДЗШ-110кВ",
	"1УРОВ-110кВ",
	"2ДЗШ-110кВ с 2УРОВ-110кВ",
	"ВЛ-110кВ СЗИВ",
	"КВЛ-110кВ №1 Заводская",
	"КВЛ-110кВ №2 Заводская",
	"КВЛ-110кВ №3 Заводская",
	"ВЛ-110кВ Лавсан",
	"ВЛ-110кВ Володарск",
	"ВЛ-110кВ Забродье",
	"ВЛ-110кВ Паричи",
	"ВЛ-110кВ Козловичи",
	"ВЛ-110кВ Светлогорск-110",
	"ВЛ-110кВ Светлогорск-220",
	"АКПА-В ВЛ-220кВ Светлогорск",
	"Устройство АПАХ",
	"АЧР с АПВЧ",
	"ВЧ аппаратура ETIL-680 300/420кГц ВЛ-220кВ Мирадино",
	"ВЧ аппаратура ETIL-640 320/324кГц ВЛ-220кВ Мирадино",
	"КА-1",
	"КА-2",
	"КА-6",
	"КА-7",
	"КА-8",
	"КА-9",
	"ТСН-20Т",
	"ТСН-30Т",
	"ТСН-22Т",
	"ТСН-23Т",
	"ТСН-24Т",
	"ТСН-25Т",
	"ТСН-26Т",
	"ТСН-10Т",
	"ГРП-2",
	"ГРП-3",
	"ТСН-40Т",
	"ТСН-50Т",
	"ТСН-27Т",
	"ТСН-28Т",
	"ТСН-29Т",
	"ТСН-41Т",
	"ТСН-42Т",
	"ТСН-43Т",
	"ТСН-44Т",
	"ТСН-45Т",
	"ТСН-46Т",
	"ТСН-47Т",
	"ТСН-60Т",
	"ТСН-63Т",
	"ТСН-65Т",
	"ТСН-66Т",
	"ТСН-68Т",
	"ТСН-69Т",
	"ТСН-70Т",
	"ТСН-71Т",
	"ТСН-72Т",
	"1 секция КРУ-3,15кВ",
	"3 секция КРУ-3,15кВ",
	"4 секция КРУ-3,15кВ",
	"5 секция КРУ-3,15кВ",
	"6 секция КРУ-3,15кВ",
	"7 секция КРУ-3,15кВ",
	"8 секция КРУ-3,15кВ",
	"9 секция КРУ-3,15кВ",
	"1 секция РУСН-0,4кВ",
	"2 секция РУСН-0,4кВ",
	"3 секция РУСН-0,4кВ",
	"4 секция РУСН-0,4кВ",
	"5 секция РУСН-0,4кВ",
	"6 секция РУСН-0,4кВ",
	"7 секция РУСН-0,4кВ",
	"1 секция КРУ-6,3кВ",
	"2 секция КРУ-6,3кВ",
	"3 секция КРУ-6,3кВ"
	)

val list2 = listOf(
	"Вывести в ремонт ВЛ",
	"Вывести в ремонт В",
	"Заменить В на ОВ",
)

val gson = Gson()
val json = gson.toJson(calendarFullDayShiftModelTags)

val calendarFullDayShift =
            Gson().fromJson(calendarFullDayShiftJson, CalendarFullDayShiftModel::class.java)

            class MyAdapter(private val items: List<MyItem>) :
                RecyclerView.Adapter<MyAdapter.MyViewHolder>() {

                private val expandedPositions = SparseBooleanArray()

                override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {
                    val view = LayoutInflater.from(parent.context)
                        .inflate(R.layout.item_layout, parent, false)
                    return MyViewHolder(view)
                }

                override fun onBindViewHolder(holder: MyViewHolder, position: Int) {
                    val isExpanded = expandedPositions[position, false]
                    holder.expandablePanel.visibility = if (isExpanded) View.VISIBLE else View.GONE

                    holder.itemView.setOnClickListener {
                        val shouldExpand = !expandedPositions[position, false]
                        if (shouldExpand) {
                            expandedPositions.put(position, true)
                            holder.expandablePanel.expand()
                        } else {
                            expandedPositions.delete(position)
                            holder.expandablePanel.collapse()
                        }
                    }
                }

                override fun getItemCount() = items.size

                inner class MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
                    val expandablePanel: View = itemView.findViewById(R.id.expandablePanel)
                }
            }

            fun View.expand() {
                measure(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT)
                val targetHeight = measuredHeight

                layoutParams.height = 0
                visibility = View.VISIBLE

                animate().setDuration(300).height(targetHeight).start()
            }

            fun View.collapse() {
                val initialHeight = measuredHeight

                animate().setDuration(300).height(0).withEndAction {
                    visibility = View.GONE
                }.start()
            }

            private fun ViewPropertyAnimator.height(toHeight: Int): ViewPropertyAnimator {
                return this.setUpdateListener { animation ->
                    layoutParams.height = (animation.animatedValue as Float).toInt()
                    requestLayout()
                }
            }


            Конечно, давайте перепишем код, используя SparseBooleanArray, переместим логику в ViewHolder и воспользуемся ViewBinding.

            Пример кода
            Разметка элемента (item_layout.xml):
            xml

            Copy
            <LinearLayout
                xmlns:android="http://schemas.android.com/apk/res/android"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical">

                <TextView
                    android:id="@+id/title"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:text="Item Title" />

                <LinearLayout
                    android:id="@+id/expandablePanel"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:visibility="gone">

                    <!-- Content of the expandable panel -->

                </LinearLayout>
            </LinearLayout>
            Адаптер:
            kotlin

            Copy
            class MyAdapter(private val items: List<MyItem>) :
                RecyclerView.Adapter<MyAdapter.MyViewHolder>() {

                private val expandedPositions = SparseBooleanArray()

                override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {
                    val binding = ItemLayoutBinding.inflate(LayoutInflater.from(parent.context), parent, false)
                    return MyViewHolder(binding)
                }

                override fun onBindViewHolder(holder: MyViewHolder, position: Int) {
                    holder.bind(items[position], position)
                }

                override fun getItemCount() = items.size

                inner class MyViewHolder(private val binding: ItemLayoutBinding) :
                    RecyclerView.ViewHolder(binding.root) {

                    fun bind(item: MyItem, position: Int) {
                        binding.title.text = item.title

                        val isExpanded = expandedPositions[position, false]
                        binding.expandablePanel.visibility = if (isExpanded) View.VISIBLE else View.GONE

                        binding.root.setOnClickListener {
                            val shouldExpand = !expandedPositions[position, false]
                            if (shouldExpand) {
                                expandedPositions.put(position, true)
                                binding.expandablePanel.expand()
                            } else {
                                expandedPositions.delete(position)
                                binding.expandablePanel.collapse()
                            }
                            notifyItemChanged(position)
                        }
                    }
                }
            }
            Методы для анимации:
            kotlin

            Copy
            fun View.expand() {
                measure(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT)
                val targetHeight = measuredHeight

                layoutParams.height = 0
                visibility = View.VISIBLE

                val animator = ValueAnimator.ofInt(0, targetHeight).apply {
                    addUpdateListener { valueAnimator ->
                        layoutParams.height = valueAnimator.animatedValue as Int
                        requestLayout()
                    }
                    duration = 300
                }
                animator.start()
            }

            fun View.collapse() {
                val initialHeight = measuredHeight

                val animator = ValueAnimator.ofInt(initialHeight, 0).apply {
                    addUpdateListener { valueAnimator ->
                        layoutParams.height = valueAnimator.animatedValue as Int
                        requestLayout()
                    }
                    duration = 300
                    addListener(object : AnimatorListenerAdapter() {
                        override fun onAnimationEnd(animation: Animator) {
                            visibility = View.GONE
                        }
                    })
                }
                animator.start()
            }
            Пояснение
            SparseBooleanArray: Используется для отслеживания состояния раскрытия элементов.
            ViewBinding: Упрощает доступ к видам, избегая findViewById.
            Логика в ViewHolder: Обработка кликов и анимации теперь внутри ViewHolder.